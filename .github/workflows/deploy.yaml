name: build-envs-reuseable-workflow
env:
  AWS_REGION: us-east-2
on:
  workflow_call:
    inputs:
      BUILD_SECRETS:
        required: true
        type: string

      BUILD_ENVS:
        required: true
        type: string

      SSM_PARAMS:
        required: true
        type: string
      SSM_SECRETS:
        required: true
        type: string

    outputs:
      ENV_VALUES:
        description: "The first output string"
        value: ${{ jobs.build-envs.outputs.PLAIN_ARRAY }}
      SECRET_YAMLS:
        description: "Array of Base64 Encoded YAML files for secrets"
        value: ${{ jobs.build-envs.outputs.YAMLS_ARRAY }}


jobs:
  build-envs:
    runs-on: ubuntu-latest
    outputs:
      PLAIN_ARRAY: ${{ steps.compose-envs.outputs.PLAIN_ARRAY }}
      YAMLS_ARRAY: ${{ steps.compose-secrets.outputs.YAMLS_ARRAY }}
        

    steps:

      - name: Checkout
        uses: actions/checkout@v2



      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_EXPERIMENTAL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_EXPERIMENTAL }}
          aws-region: us-east-2

      - name: aws-ssm-to-env
        uses: Bundle-App/aws-ssm-to-env@master
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_EXPERIMENTAL }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_EXPERIMENTAL }}
        with:
          ssm_parameter_list: ${{inputs.SSM_PARAMS}}
          prefix: PLAIN_



      - name: aws-secrets-to-env
        uses: Bundle-App/aws-ssm-to-env@master
        if: ${{ inputs.BUILD_SECRETS == 'yes' }}
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_EXPERIMENTAL }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_EXPERIMENTAL }}
        with:
          ssm_parameter_list: ${{inputs.SSM_SECRETS}}
          prefix: SECRET_


   
      # - uses: ProcureAi/aws-ssm-secrets-multiple@v1.0.0
      #   with:
      #     SSM_PARAMETERS: ${{inputs.SSM_SECRETS}}

      # - run: |
      #     echo "this is your secret: $FOO"


      # - name: Get AWS Parameter Store values
      #   uses: dkershner6/aws-ssm-getparameters-action@v1
      #   with:
      #     parameterPairs: ${{inputs.SSM_SECRETS}}
      #   # The part before equals is the ssm parameterName, and after is the ENV Variable name for the workflow.
      #   # No limit on number of parameters. You can put new lines and spaces in as desired, they get trimmed out.
      #   # Always prepend the environment variable with SSM_ to make it clear that it is an SSM parameter 
      #   # and always make sure rest of env is in lowercase.
      #     withDecryption: "true" # defaults to true

  

      - name: Plain Env Variables
        if: ${{ inputs.BUILD_SECRETS == 'yes' }}
        id: compose-envs
        run: |

            plains=""
            for var in "${!PLAIN_@}";
            do
              VALUE=${!var}
              k=${var:6}
              
              KEY=$(echo "$k" | tr -d '[:space:]')
            

              echo -n "$VALUE" > "$KEY"

          
            
              plains="${plains}\"${KEY}\","  ## Build JSON array of plain keys
          
            done
            plains=${plains::-1} ##remove last comma
            plains="[${plains}]"
            
            
            echo "$plains"
            echo ::set-output name=PLAIN_ARRAY::$plains

      - name: Set Non-secret ENV
        id: set-env
        run: |
            ##
            echo "To be contd"

      - name: Install Kubeseal & Kubectl
   
        if: ${{ inputs.BUILD_SECRETS == 'yes' }}
        run: |
            #Install kubeseal
            brew update
            brew install kubeseal
            brew install kubectl
      
      - name: Compose Secrets 
        if: ${{ inputs.BUILD_SECRETS == 'yes' }}
        id: compose-secrets 
        env:
          KUBESEAL_CERT: ${{ secrets.KUBESEAL_CERT }}
        run: |
            #Get secrets from env 

            compgen -A variable | grep SECRET > list.txt

            echo -n  $KUBESEAL_CERT | base64 -d > cert.pem
            secrets=""
            YAMLS=""
            
            git_hash=$(git rev-parse --short "$GITHUB_SHA")
            for var in "${!SECRET_@}";
            do
              VALUE=${!var}
              k=${var:7}

            
              touch "$k"
              KEY=$(echo "$k" | tr -d '[:space:]')
              #KEY="${KEY}-${git_hash}"

              echo -n "$VALUE" > "$KEY"

              #SECRET_YAML=$(kubectl create secret generic $KEY -n experimental --from-file="$KEY" --dry-run=client -o yaml | kubeseal --cert cert.pem -o yaml | base64 )

          
              kubectl create secret generic $KEY -n experimental --from-file="$KEY" --dry-run=client -o yaml | kubeseal --cert cert.pem -o yaml > charts/deploy/templates/secrets/"$KEY".yaml
              rm -f "$KEY"
            
              secrets="${secrets}\"${KEY}\","  ## Build JSON array of secret keys
             
          
            done





            #Cleanup files

            rm -f list.txt
            rm -f cert.pem
            secrets=${secrets::-1} ##remove last comma
         
            secrets="[${secrets}]"
         
            
        
            echo ::set-output name=SECRET_ARRAY::$secrets

      - name: Set Secrets to ENV
        if: ${{ inputs.BUILD_SECRETS == 'yes' }}
        id: set-secrets
        env:
          SECRET_ARRAY: ${{ steps.compose-secrets.outputs.SECRET_ARRAY }}

        run: |
            #set secrets in values file

            echo "Setting $SECRET_ARRAY"

            secrets=$(cat ./charts/deploy/values.yaml | grep secretKeys: | awk '{print $2}')
            echo "Old secret $secrets"
            sed -i "s/secretKeys: \[[^]]*\]/secretKeys: ${SECRET_ARRAY}/g" ./charts/deploy/values.yaml

      
      
      
      - name: write
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GLOBAL_GITHUB_TOKEN }}
          BRANCH_NAME: 'experimental' #optional defaults to master
   


      


  build-image:
    
    needs: build-envs
    uses: Bundle-App/gitops-workflows/.github/workflows/build-image.yaml@experimental

    with:
    
      BUILD_IMAGE: ${{ inputs.BUILD_SECRETS == 'yes' }}

    secrets: inherit
      # AWS_ACCESS_KEY_EXPERIMENTAL: ${{ secrets.AWS_ACCESS_KEY_EXPERIMENTAL }}
        # AWS_SECRET_KEY_EXPERIMENTAL: ${{ secrets.AWS_SECRET_KEY_EXPERIMENTAL }}